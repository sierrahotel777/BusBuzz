# .github/workflows/ci-cd.yml

name: BusBuzz Full Stack Deployment (Unified)

on:
  push:
    branches:
      - main # Trigger on any push to main

jobs:
  # ----------------------------------------------------------------------
  # 1. BACKEND DEPLOYMENT (DOCKER) - Runs First
  # ----------------------------------------------------------------------
  backend-deploy:
    runs-on: ubuntu-latest
    environment: Production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: 'Azure Login (Service Principal)'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} 

    - name: 'Set up Docker Buildx'
      uses: docker/setup-buildx-action@v3

    - name: 'Log in to Azure Container Registry (ACR)'
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.ACR_LOGIN_SERVER }} 
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: 'Build and Push Docker Image'
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ secrets.ACR_LOGIN_SERVER }}/busbuzz-backend:${{ github.sha }}
        file: ./backend/Dockerfile
        
    - name: 'Configure App Service (Web App) to use new image'
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME }} # Using AZURE_WEBAPP_NAME secret
        images: ${{ secrets.ACR_LOGIN_SERVER }}/busbuzz-backend:${{ github.sha }}

  # ----------------------------------------------------------------------
  # 2. FRONTEND DEPLOYMENT (SWA) - Runs After Backend
  # ----------------------------------------------------------------------
  frontend-deploy:
    runs-on: ubuntu-latest
    needs: [backend-deploy] # Ensures the backend finishes successfully before the frontend starts
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      # 1. Inject API URL (Using 'sed' fix for bare domain)
      - name: Create Frontend .env File
        run: |
          # Strips any trailing /api suffix for the base URL
          BASE_URL=$(echo "${{ secrets.BACKEND_API_URL }}" | sed 's|/api$||')
          echo "REACT_APP_API_URL=${BASE_URL}" > .env.production
        working-directory: ./frontend
        
      # 2. Install dependencies and Build Artifacts (Creating the 'build' folder)
      - name: Install dependencies and Build
        run: |
          npm install
          npm run build
        working-directory: ./frontend
        
      # 3. Deploy to Azure Static Web Apps
      - name: Deploy to Azure Static Web App
        uses: azure/static-web-apps-deploy@v1 
        with:
          # Use the token name from the autogenerated file for guaranteed recognition
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }} 
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/frontend"   
          api_location: ""            
          output_location: "build"